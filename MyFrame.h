// -*- C++ -*-
//
// generated by wxGlade 0.6.8 on Thu Aug 18 14:02:09 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#ifndef MYFRAME_H
#define MYFRAME_H

#include <wx/wx.h>
#include <wx/tglbtn.h>

#ifndef APP_CATALOG
#define APP_CATALOG "oduqc"  // replace with the appropriate catalog name
#endif

#include <fstream>
#include <sstream>
#include <sys/stat.h>

#include "graph.h"
#include "face.h"
#include "serial.h"
#include "dialog.h"
#include "global.h"

#include "message.h"

enum {
  ID_RUNBTN,
  ID_CLRBTN,
  ID_TSTBTN,
  ID_EXTBTN,
  ID_CANCEL,
  ID_CONTINUE,
  ID_REDO,
  ID_SETBTN,
  ID_ODUID,
};

template <typename T>
std::string itoa(const T a_value) {
  std::ostringstream out;
  out << a_value;
  return out.str();
}

struct values {
  int Lpd;
  int Lstd;
  int Spd;
  int Sstd;
};

class MyFrame: public wxFrame {
public:
  MyFrame(void);

  MyFrame(wxWindow *, int = wxID_ANY, const wxString & = wxEmptyString, 
	  const wxPoint & = wxDefaultPosition, const wxSize & = wxDefaultSize, 
	  long = wxDEFAULT_FRAME_STYLE);
  ~MyFrame(void);

  void setHardwareReady(bool);
  void clearFace(void);
  void updateFace( uint );
  void clearGraph(void);
  void updateWarningLimit(float);
  void updateFailureLimit(float);
  void updateGraph(float);
  void updateGraph(int, float);
  void updateGraph( char * );
  void updateGraph(void);
  void updateNorms( char * );
  void continueQC(void);
  void startMove(void);
  void moveComplete(void);

  void setODUType( uint );
  void setODUSelection(int);

  void reset(void);
  void setConnector(int);
  void redrawGraph(int);
  void setup(bool);

  void updateReRunFloor( float );
  void autoRun_Changed( bool );
  void useRobot_Changed( bool );
  void verboseLevelChange(int);

  bool runCanceled(void) {return this->cancelRun;}

  inline int getFiber( void ) {return fiber;}
  
  void sendToSerial(string s) { arduino->send(s); }

  void PanicButton(void);
  void FatalError(void);
  void FatalErrorCleared(void);
  
private:
  void set_properties(void);
  void do_layout(void);
  void makeTimer( timer_t *, int, int );
  struct values parseReading( string );
  bool checkResult(string);
  void makeUniqueName(void);

  ofstream * log;
  streambuf * cbuf;
  int verbose, maxReRuns, numReRuns;
  FILE * dataFile;
  float rerunTrigger, rerunFloor, warningLimit;
  char name[64];

  uint QCTestResult;
  message * endMsg;

protected:

  wxStatusBar* statusbar;
  wxButton* runButton;
  wxToggleButton *setupButton;
  wxChoice* oduChoice;

  BasicDialog * dialog;

  wxButton* exitButton;
  wxButton *contButton, *redoButton, *cancelButton;

  graph * frmGraph;
  face  * frmFace;

  serial *arduino;
  bool ready, useHardware, useRobot, automagick, cancelRun, rerunConnector;
  uint connector, fiber, numConnectors, numChannels;
  int whichConnector;
  float * norm;

  char result[576];

  DECLARE_EVENT_TABLE()

public:
  inline int getConnector(void) {return connector;}

  virtual void run             (wxCommandEvent &);
  virtual void clear           (wxCommandEvent &);
  virtual void exit            (wxCommandEvent &);
  virtual void cancel          (wxCommandEvent &);
  virtual void redo            (wxCommandEvent &);
  virtual void cont            (wxCommandEvent &);
  virtual void setup           (wxCommandEvent &);
  virtual void oduChoiceChange (wxCommandEvent &);

  wxString statusbar_fields[27] = {
    _("HB ODU QC"),                     // [0]
    _("Continue with Connector 1?"),    // [1]
    _("Continue with Connector 2?"),    // [2]
    _("Continue with Connector 3?"),    // [3]
    _("Continue with Connector 4?"),    // [4]
    _("Continue with Connector 5?"),    // [5]
    _("Continue with Connector 6?"),    // [6]
    _("Continue with Connector 7?"),    // [7]
    _("Continue with Connector 8?"),    // [8]
    _("Continue with Connector 9?"),    // [9]
    _("Continue with Connector 10?"),   // [10]
    _("Continue with Connector 11?"),   // [11]
    _("Continue with Connector 12?"),   // [12]
    _("Continue with Connector 13?"),   // [13]
    _("Continue with Connector 14?"),   // [14]
    _("Continue with Connector 15?"),   // [15]
    _("Continue with Connector 16?"),   // [16]
    _("Continue with Connector 17?"),   // [17]
    _("Finish this ODU?"),              // [18]

    _("Querying Identity"),             // [19]
    _("Power On Self Test"),            // [20]
    _("Running..."),                    // [21]
    _("Moving..."),                     // [22]
    _("ODU Passed"),                    // [23]
    _("ODU Passed with warnings"),      // [24]
    _("ODU Failed"),                    // [25]
    _("Petulantly refusing to continue")// [26]
  };
  void setStatus( int which ) {
    if ( which >= 0 && which <= 26 )
      statusbar->SetStatusText(statusbar_fields[which]);
  }
  void setStatus( string s ) {
    setStatus(s.c_str());
    return;
  }
  void setStatus( char *c ) {
    if ( strlen(c) > 1 ) {
      wxString mystring (c, wxConvUTF8);

      if ( mystring.length() > 1 )
	statusbar->SetStatusText(mystring);
    }
    return;
  }

}; // wxGlade: end class

#endif // MYFRAME_H
